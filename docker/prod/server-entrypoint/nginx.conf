worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security headers (REMOVE CORS headers from global level)
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Hide nginx version
    server_tokens off;

    # File upload size limit
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    # Timeouts
    client_body_timeout 10s;
    client_header_timeout 10s;
    keepalive_timeout 30s;
    send_timeout 10s;

    # Sendfile optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression (optimized for low CPU)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 3;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting (relaxed for development)
    limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;

    # Backend upstreams
    upstream backend_api_forum {
        server backend-api-forum:80 max_fails=3 fail_timeout=30s;
    }

    upstream backend_api_instructor {
        server backend-api-instructor:80 max_fails=3 fail_timeout=30s;
    }

    upstream backend_api_student {
        server backend-api-student:80 max_fails=3 fail_timeout=30s;
    }

    upstream backend_api_public {
        least_conn;
        server backend-api-public:80 max_fails=3 fail_timeout=30s;
    }

    upstream backend_api_user {
        server backend-api-user:80 max_fails=3 fail_timeout=30s;
    }

    # WebSocket upgrade headers
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Cache zones (reduced for free tier)
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:5m max_size=50m inactive=30m use_temp_path=off;

    # CORS origin mapping
    map $http_origin $cors_origin {
        default "";
        "~^http://(forum|user|instructor|student|public)\.course\.iamra\.site$" $http_origin;
    }

    # ========================================
    # BACKEND API SUBDOMAINS
    # ========================================

    # api-forum.course.iamra.site
    server {
        listen 80;
        server_name api-forum.course.iamra.site;

        limit_req zone=api burst=10 nodelay;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://forum.course.iamra.site" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                add_header Content-Length 0 always;
                return 204;
            }

            add_header Access-Control-Allow-Origin "http://forum.course.iamra.site" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

            proxy_pass http://backend_api_forum;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ws/ {
            proxy_pass http://backend-api-forum-reverb:8080/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }
    }

    # api-instructor.course.iamra.site
    server {
        listen 80;
        server_name api-instructor.course.iamra.site;

        limit_req zone=api burst=10 nodelay;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://instructor.course.iamra.site" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                add_header Content-Length 0 always;
                return 204;
            }

            add_header Access-Control-Allow-Origin "http://instructor.course.iamra.site" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

            proxy_pass http://backend_api_instructor;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # api-student.course.iamra.site
    server {
        listen 80;
        server_name api-student.course.iamra.site;

        limit_req zone=api burst=10 nodelay;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://student.course.iamra.site" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                add_header Content-Length 0 always;
                return 204;
            }

            add_header Access-Control-Allow-Origin "http://student.course.iamra.site" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

            proxy_pass http://backend_api_student;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # api-public.course.iamra.site
    server {
        listen 80;
        server_name api-public.course.iamra.site;

        limit_req zone=api burst=20 nodelay;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                add_header Content-Length 0 always;
                return 204;
            }

            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;

            proxy_pass http://backend_api_public;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 10m;
            proxy_cache_valid 404 2m;
            add_header X-Cache-Status $upstream_cache_status;
        }
    }

    # api-user.course.iamra.site - Let Laravel handle CORS
    server {
        listen 80;
        server_name api-user.course.iamra.site;

        limit_req zone=api burst=10 nodelay;

        # Auth endpoints with stricter rate limiting
        location ~ ^/v1/auth/(login|register|refresh) {
            limit_req zone=login burst=3 nodelay;

            proxy_pass http://backend_api_user;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # WebSocket support
        location /ws/ {
            proxy_pass http://backend-api-user-reverb:8080/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        # All other API endpoints
        location / {
            proxy_pass http://backend_api_user;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
    }

    # ========================================
    # FRONTEND SUBDOMAINS (Static Files)
    # ========================================

    # forum.course.iamra.site
    server {
        listen 80;
        server_name forum.course.iamra.site;
        root /var/www/html/forum;
        index index.html;

        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }
    }

    # user.course.iamra.site
    server {
        listen 80;
        server_name user.course.iamra.site;
        root /var/www/html/user;
        index index.html;

        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }
    }

    # instructor.course.iamra.site
    server {
        listen 80;
        server_name instructor.course.iamra.site;
        root /var/www/html/instructor;
        index index.html;

        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }
    }

    # student.course.iamra.site
    server {
        listen 80;
        server_name student.course.iamra.site;
        root /var/www/html/student;
        index index.html;

        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }
    }

    # course.iamra.site
    server {
        listen 80;
        server_name course.iamra.site;
        root /var/www/html/public;
        index index.html;

        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|eot|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }
    }

    # Default server (catch-all)
    server {
        listen 80 default_server;
        server_name _;
        return 444;
    }
}